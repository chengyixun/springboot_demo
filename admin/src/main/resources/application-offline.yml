spring:
  datasource:
    url: jdbc:mysql://localhost:3306/girl?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
    username: root
    password: root
  elasticsearch:
    jest:
      uris: http://172.16.0.63:29200
  redis:
    host: 127.0.0.1
    port: 6379
    database: 0





  kafka:
    bootstrap-servers: 192.168.11.116:9092
    producer:
      #发生错误后，消息重发的次数
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放到同一个批次里，该参数指定一个批次可以使用的内存大小，按照字节计算
      batch-size: 16384
      #设置生产者内存缓冲区的大小
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      group-id: my_test_group1
       #自定提交的时间间隔
      auto-commit-interval: 100
       # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
       # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
       # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
       #是否自定提交偏移量
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

    listener:
      #在侦听器容器中运行的线程数。
      concurrency: 5



mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 0
      logic-not-delete-value: 1
  configuration:
    # 这个配置会将执行的sql打印出来，在开发和测试的时候使用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mapper/user/*.xml


